// This is a generated file. Edits will be lost.
(function() {
  this.defer = function(timeout, callback) {
    return setTimeout(callback, timeout);
  };

  this.cancel = function(timer) {
    return clearTimeout(timer);
  };

  this.repeat = function(timeout, callback) {
    var id;
    return id = setInterval((function() {
      if (callback() === false) {
        return clearInterval(id);
      }
    }), timeout);
  };

  this.Stagehand = (function() {
    function Stagehand(root) {
      this.root = root;
      this.jobs = {};
      this.timer = null;
      this.min_interval = 5000;
      this.max_interval = 10000;
      this.handlers = {};
      this.poll(this.min_interval);
    }

    Stagehand.prototype.bind = function(ntype, f) {
      var base;
      if ((base = this.handlers)[ntype] == null) {
        base[ntype] = [];
      }
      return this.handlers[ntype].push(f);
    };

    Stagehand.prototype.api = function(url, data, type) {
      var dfd, xhr;
      if (data == null) {
        data = {};
      }
      if (type == null) {
        type = 'GET';
      }
      dfd = $.Deferred();
      xhr = $.ajax({
        url: this.root + url,
        data: data,
        type: type.toUpperCase()
      }).done((function(_this) {
        return function(response) {
          if (response.jobid == null) {
            response.xhr = xhr;
            return dfd.resolve(response);
          }
          _this.jobs[response.jobid] = [dfd, xhr];
          if (response.pending) {
            dfd.notify(response.jobid);
          }
          if (response.pending && _this.interval > response.interval) {
            _this.poll(response.interval);
          } else if (_this.interval > 1000) {
            _this.poll(1000);
          }
          return _this.handle_response(response);
        };
      })(this)).fail((function(_this) {
        return function(xhr, status) {
          return dfd.reject({
            message: "HTTP " + xhr.status + ": " + xhr.statusText,
            xhr: xhr
          });
        };
      })(this));
      return dfd.promise();
    };

    Stagehand.prototype.handle_response = function(arg) {
      var dfd, f, i, j, job, jobs, k, key, len, len1, len2, n, notifications, ref, ref1, results, value, xhr;
      jobs = arg.jobs, notifications = arg.notifications;
      for (i = 0, len = jobs.length; i < len; i++) {
        job = jobs[i];
        if (this.jobs[job.id]) {
          ref = this.jobs[job.id], dfd = ref[0], xhr = ref[1];
          delete this.jobs[job.id];
          if (job.error) {
            job.error.xhr = xhr;
            dfd.reject(job.error);
          } else {
            dfd.resolve(job.result);
          }
        }
      }
      results = [];
      for (j = 0, len1 = notifications.length; j < len1; j++) {
        n = notifications[j];
        if (this.handlers[n._ntype] != null) {
          ref1 = this.handlers[n._ntype];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            f = ref1[k];
            f(n);
          }
        }
        if (n._ntype === 'alert') {
          if (n.type == null) {
            n.type = 'notice';
          }
          if (n.nonblock == null) {
            n.nonblock = false;
          }
          if (n.animation == null) {
            n.animation = 'fade';
          }
          if (n.closer == null) {
            n.closer = true;
          }
          if (n.delay == null) {
            n.delay = 8000;
          }
          for (key in n) {
            value = n[key];
            if (typeof value === 'string') {
              value = value.replace(/{{root}}/g, this.root);
            }
            n['pnotify_' + key] = value;
          }
          results.push($.pnotify(n));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Stagehand.prototype.poll = function(interval) {
      if (interval == null) {
        interval = this.interval;
      }
      if (this.timer) {
        if (interval === this.interval) {
          return;
        }
        clearInterval(this.timer);
      }
      this.interval = interval <= this.max_interval ? interval : this.max_interval;
      return this.timer = repeat(this.interval, (function(_this) {
        return function() {
          var data, dfd, jobid;
          data = !$.isEmptyObject(_this.jobs) ? {
            jobs: ((function() {
              var ref, results;
              ref = this.jobs;
              results = [];
              for (jobid in ref) {
                dfd = ref[jobid];
                results.push(jobid);
              }
              return results;
            }).call(_this)).join(',')
          } : null;
          return $.ajax({
            url: _this.root + '/api/jobs',
            data: data,
            timeout: _this.interval
          }).done(function(arg) {
            var jobs, notifications;
            jobs = arg.jobs, notifications = arg.notifications;
            _this.handle_response({
              jobs: jobs,
              notifications: notifications
            });
            if ($.isEmptyObject(_this.jobs) && notifications.length === 0) {
              if (_this.interval < _this.max_interval) {
                return _this.poll(_this.interval * 2);
              }
            } else if (_this.interval > _this.min_interval) {
              return _this.poll(_this.min_interval);
            }
          }).fail(function(xhr, status, error) {
            return _this.poll(_this.max_interval);
          });
        };
      })(this));
    };

    return Stagehand;

  })();

}).call(this);
