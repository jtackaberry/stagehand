#!/usr/bin/env python
import sys
import os
import logging
import signal
import time
import errno
from optparse import OptionParser
import kaa, kaa.rpc, kaa.utils

import stagehand, stagehand.web.app
from stagehand.manager import Manager, log
from stagehand.config import config
from stagehand import web

log = logging.getLogger('stagehand')

def find_data_path():
    cwd = os.path.dirname(__file__)
    data_paths = [
        os.path.join(cwd, '../share/stagehand'),
        os.path.join(cwd, '../../share/stagehand'),  # setuptools
        os.path.join(sys.exec_prefix, 'share/stagehand'),
        os.path.join(sys.prefix, 'share/stagehand'),
        '/usr/local/share/stagehand',
        '/usr/share/stagehand'
    ]
    for path in data_paths:
        if os.path.isdir(path):
            return os.path.realpath(path)

    print("Error: couldn't find static data.  I tried looking in:")
    for path in data_paths:
        print('   *', os.path.realpath(path))
    sys.exit(1)


def reload(signum, frame, manager):
    if signum == signal.SIGHUP:
        log.warning('received SIGHUP: purging in-memory caches and reloading config')
        config.load()
        manager.tvdb.purge_caches()
        manager.check_new_episodes()
    elif signum == signal.SIGUSR1:
        log.warning('received SIGUSR1: refreshing thetvdb')
        manager.tvdb.sync()


def rpc(cmd):
    client = kaa.rpc.connect('stagehand', retry=0.5)
    try:
        kaa.inprogress(client).wait()
    except Exception:
        print('Stagehand is not running.')
    else:
        try:
            return client.rpc(cmd).wait()
        except IOError:
            # Process shuts down immediately before RPC response.
            pass


@kaa.coroutine()
def web_start_server(mgr, opts):
    web.TEMPLATE_PATH.append(os.path.join(mgr.datadir, 'web'))
    webkwargs = {}
    if config.web.username:
        webkwargs['user'] = config.web.username
        webkwargs['passwd'] = config.web.password
    if config.web.bind_address:
        webkwargs['host'] = config.web.bind_address
    if len(opts.verbose) >= 2:
        # Beware: debug=True disables template caching
        webkwargs['debug'] = True

    userdata = {'stagehand.manager': mgr, 'coffee.cachedir': os.path.join(mgr.cachedir, 'web')}
    # Try a number of different ports until we find out.  Now that the manager
    # is instantiated, the config file will have been loaded and
    # config.web.port will be the user-configured value (if any).
    ports = [opts.port or config.web.port] + list(range(8088, 8100)) + list(range(18088, 18100))
    for port in ports:
        try:
            yield web.start(port=port, log=logging.getLogger('stagehand.http'), userdata=userdata, **webkwargs)
        except IOError as e:
            if e.errno in (errno.EACCES, errno.EADDRINUSE):
                log.error('could not start webserver on port %d: %s', port, str(e))
            elif e.errno == errno.EADDRNOTAVAIL:
                log.error('could not start webserver on interface %s: %s', config.web.bind_address, str(e))
                break
            else:
                raise
        else:
            return

    # If we get here, web server couldn't start
    log.critical('failed to start webserver; edit %s or restart with different arguments', mgr.cfgfile)


@kaa.timed(0, timer=kaa.OneShotTimer, policy=kaa.POLICY_ONCE)
def web_config_changed(var, old, new, mgr, opts):
    """
    Invoked when any value in the config.web group changes.

    This is put in a timer so that if multiple variables in the config.web
    group change, this function only actually gets executed once.
    """
    log.warning('restarting webserver due to changed configuration')
    web.stop()
    web_start_server(mgr, opts)


def handle_uncaught_exception(tp, value, tb):
    """
    Global exception handler which just logs the exception and prevents the
    main loop from aborting.
    """
    # Do not prevent ^C and exit.
    if not isinstance(value, (KeyboardInterrupt, SystemExit)):
        log.exception('uncaught exception')
        # Returning False from the signal handler prevents the kaa main loop
        # from aborting.
        return False


def main():
    kaa.utils.set_process_name('stagehand')

    p = OptionParser(version='%%prog %s' % stagehand.__version__)
    p.add_option('-q', '--quiet', dest='quiet', action='store_true',
                 help='disable all logging')
    p.add_option('-v', '--verbose', dest='verbose', action='append_const', default=[],
                 help='log more detail (twice or thrice logs even more)')
    p.add_option('-b', '--bg', dest='background', action='store_true',
                 help='run stagehand in the background (daemonize)')
    p.add_option('-p', '--port', dest='port', action='store', type='int', default=0,
                 help='port the embedded webserver listens on (default is %d)' % config.web.port)
    p.add_option('-d', '--data', dest='data', action='store', metavar='PATH',
                 help="path to Stagehand's static data directory")
    p.add_option('-s', '--stop', dest='stop', action='store_true',
                 help='stop a currently running instance of Stagehand')
    opts, args = p.parse_args()

    if opts.stop:
        rpc('shutdown')
        sys.exit(1)

    # Default log levels.
    log.setLevel(logging.INFO)
    logging.getLogger('stagehand.http').setLevel(logging.WARNING)
    if opts.quiet:
        log.setLevel(logging.CRITICAL)
    elif len(opts.verbose) == 1:
        log.setLevel(logging.DEBUG)
        logging.getLogger('stagehand.web').setLevel(logging.INFO)
    elif len(opts.verbose) >= 2:
        log.setLevel(logging.DEBUG2)
        if len(opts.verbose) == 3:
            logging.getLogger('stagehand.web').setLevel(logging.DEBUG2)
            logging.getLogger('stagehand.http').setLevel(logging.DEBUG)
        else:
            logging.getLogger('stagehand.web').setLevel(logging.DEBUG)
            logging.getLogger('stagehand.http').setLevel(logging.INFO)

    httplog = logging.getLogger('stagehand.http')
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter('%(asctime)s [HTTP] %(message)s'))
    httplog.addHandler(handler)
    httplog.propagate = False

    # Instantiate Manager before we fork in case there are errors.
    try:
        mgr = Manager(datadir=opts.data or find_data_path())
    except IOError as e:
        if e.errno == errno.EADDRINUSE:
            print('Stagehand is already running at pid %d.' % rpc('pid'))
            sys.exit(1)
        raise

    # Logging after Manager instantiation but before forking will log to both
    # stdout and file logs.
    log.info('starting Stagehand %s', stagehand.__version__)

    if opts.background:
        # TODO: need some way of reporting web URL to stdout after daemonization.
        kaa.utils.daemonize()
    
    mgr.start()

    signal.signal(signal.SIGHUP, kaa.Callable(reload, mgr))
    signal.signal(signal.SIGUSR1, kaa.Callable(reload, mgr))

    # Monitor config.web group to restart web server if any config options
    # change.
    config.web.add_monitor(kaa.Callable(web_config_changed, mgr, opts))
    web_start_server(mgr, opts)

    kaa.signals['exception'].connect(handle_uncaught_exception)
    kaa.main.run()
    # Return manager for interactive interpreter
    return mgr

if __name__ == '__main__':
    m = main()
